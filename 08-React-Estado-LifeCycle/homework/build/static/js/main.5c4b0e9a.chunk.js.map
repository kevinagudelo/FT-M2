{"version":3,"sources":["components/SearchBar.jsx","components/Nav.jsx","components/Card.jsx","components/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onSearch","onSubmit","e","preventDefault","type","placeholder","value","Nav","Card","min","max","name","img","onClose","id","className","onClick","src","width","height","alt","Cards","cities","map","c","App","React","useState","setCities","ciudad","fetch","then","r","json","recurso","undefined","main","Math","round","temp_min","temp_max","weather","icon","wind","speed","temp","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qUAEe,SAASA,EAAT,GAAgC,IAAZC,EAAW,EAAXA,SACjC,OACE,uBAAMC,SAAU,SAACC,GACfA,EAAEC,iBACFH,EAAS,WAFX,UAIE,uBACEI,KAAK,OACLC,YAAY,cAEd,uBAAOD,KAAK,SAASE,MAAM,e,MCDlBC,MANf,YAA0B,IAAZP,EAAW,EAAXA,SACZ,OACE,cAACD,EAAD,CAAWC,SAAUA,K,YCJV,SAASQ,EAAT,GAAoD,IAApCC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QAAc,EAALC,GACzD,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKD,GAAG,YAAYC,UAAU,MAA9B,SACI,wBAAQC,QAASH,EAASE,UAAU,wBAApC,iBAEJ,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BJ,IAC5B,sBAAKI,UAAU,MAAf,UACE,sBAAKA,UAAU,6BAAf,UACE,oCACA,8BAAIN,EAAJ,aAEF,sBAAKM,UAAU,6BAAf,UACE,oCACA,8BAAIL,EAAJ,aAEF,qBAAKK,UAAU,6BAAf,SACE,qBAAKA,UAAU,aAAaE,IAAK,oCAAoCL,EAAI,UAAWM,MAAM,KAAKC,OAAO,KAAKC,IAAI,gBChB9G,SAASC,EAAT,GAAmC,IAAnBC,EAAkB,EAAlBA,OAAQT,EAAU,EAAVA,QACrC,OAAGS,EAEC,qBAAKP,UAAU,QAAf,SACGO,EAAOC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CACbd,IAAKc,EAAEd,IACPD,IAAKe,EAAEf,IACPE,KAAMa,EAAEb,KACRC,IAAKY,EAAEZ,IACPC,QAAS,kBAAMA,EAAQW,EAAEV,KACzBA,GAAIU,EAAEV,UAMZ,+CCjBS,SAASW,IACtB,MAA4BC,IAAMC,SAAS,IAA3C,mBAAeC,GAAf,WA4BA,OACE,sBAAKb,UAAU,MAAf,UAEE,cAAC,EAAD,CAAKf,SA9BT,SAAkB6B,GAEhBC,MAAM,oDAAD,OAAqDD,EAArD,kBADY,mCACZ,kBACFE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAACG,GACL,QAAoBC,IAAjBD,EAAQE,KAAmB,CAC5B,IAAMP,EAAS,CACbpB,IAAK4B,KAAKC,MAAMJ,EAAQE,KAAKG,UAC7B7B,IAAK2B,KAAKC,MAAMJ,EAAQE,KAAKI,UAC7B5B,IAAKsB,EAAQO,QAAQ,GAAGC,KACxB5B,GAAIoB,EAAQpB,GACZ6B,KAAMT,EAAQS,KAAKC,MACnBC,KAAMX,EAAQE,KAAKS,KACnBlC,KAAMuB,EAAQvB,KACd8B,QAASP,EAAQO,QAAQ,GAAGL,KAC5BU,OAAQZ,EAAQY,OAAOC,IACvBC,QAASd,EAAQe,MAAMC,IACvBC,SAAUjB,EAAQe,MAAMG,KAE1BxB,GAAU,SAAAyB,GAAS,4BAAQA,GAAR,CAAmBxB,YAEtCyB,MAAM,8BAUV,cAAC,EAAD,IACA,8CC1BcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c4b0e9a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function SearchBar({onSearch}) {\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      onSearch(\"Cairns\");\n    }}>\n      <input\n        type=\"text\"\n        placeholder=\"Ciudad...\"\n      />\n      <input type=\"submit\" value=\"Agregar\" />\n    </form>\n  );\n}\n","import React from 'react';\nimport Logo from '../logoHenry.png'\nimport SearchBar from './SearchBar.jsx';\nimport './Nav.css';\n\nfunction Nav({onSearch}) {\n  return (\n    <SearchBar onSearch={onSearch}/>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport './Card.css';\n\nexport default function Card ({min, max, name, img, onClose, id}) {\n    return (\n      <div className=\"card\">\n        <div id=\"closeIcon\" className=\"row\">\n            <button onClick={onClose} className=\"btn btn-sm btn-danger\">X</button>\n        </div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{name}</h5>\n          <div className=\"row\">\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\n              <p>Min</p>\n              <p>{min}°</p>\n            </div>\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\n              <p>Max</p>\n              <p>{max}°</p>\n            </div>\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\n              <img className=\"iconoClima\" src={\"http://openweathermap.org/img/wn/\"+img+\"@2x.png\"} width=\"80\" height=\"80\" alt=\"\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n};\n","import React from 'react';\nimport './Cards.css';\n\nimport Card from './Card.jsx';\n\nexport default function Cards({cities, onClose}) {\n  if(cities){\n    return (\n      <div className='cards'>\n        {cities.map(c => <Card\n            max={c.max}\n            min={c.min}\n            name={c.name}\n            img={c.img}\n            onClose={() => onClose(c.id)}\n            id={c.id}\n          /> )}\n      </div>\n    );\n  } else {\n    return(\n      <div>Sin ciudades</div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav.jsx';\nimport Cards from './components/Cards.jsx';\nexport default function App() {\n  const [cities, setCities] = React.useState([]);\n  function onSearch(ciudad) {\n    const apiKey =   '4ae2636d8dfbdc3044bede63951a019b'\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n\n    }\n\n  return (\n    <div className=\"App\">\n      { /* Tu código acá: */ }\n      <Nav onSearch={onSearch}/>\n      <Cards/>\n      <h1>Título</h1>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}